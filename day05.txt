집계함수
	결과가 한 개가 나오는 함수

GROUP BY 절
	그룹화하여 집계함수를 적용 시킬 수 있다
	
	ROLLUP(컬럼명1, 컬럼명2, ...)
		컬럼명1 별 소계를 구해준다
		컬럼의 순서가 바뀌면 결과도 바뀌게 된다
	CUBE(컬럼명1, 컬럼명2, ...)
		컬럼 순서에 상관 없이 모든 경우의 수를 기준으로
		소계를 구해준다
		컬럼의 순서가 바뀌어도 결과는 달라지지 않는다
	GROUPING SETS(컬럼명1, 컬럼명2, ...)
		컬럼명1별 소계, 컬럼명2별 소계
		컬럼의 순서가 바뀌어도 결과는 달라지지 않는다
		()를 써서 새로운 집합을 만들어서 적용 가능하다
	GROUPING()
		그룹별 소계 XXXXX 
		도와주는 역할
		소계가 집계된다면 결과는 1 아니면 결과가 0

HAVING절
	GROUP 함수를 조건에 적용시키고 싶다면 HAVING절을 사용해야 하며
	HAVING절은 GROUP BY절 앞 또는 뒤에 위치하면 된다
	(개념상 뒤쪽에 위치하는 것이 해석에 자연스러움)
----------------------------------------------------------------------
윈도우함수
	컬럼과 컬럼간의 연산이 아닌, 행과 행 간의 비교 또는 연산을 처리하기 위해
	사용하는 함수
	데이터베이스를 사용한 온라인 분석 처리 용도로 사용하기 위해서
	SQL에 추가가 되었으며 OLAP 함수라고 부르기도 한다
	메인쿼리 뿐만 아니라 서브쿼리에서도 사용 가능하지만 함수 자체에서
	중첩할 수는 없다
	윈도우 함수 사용 결과는 행 갯수에 영향을 미치지 않는다

SELECT 윈도우함수 OVER ([PARTITION BY] [ORDER BY] [WINDOWING절])
FROM 테이블명;
	PARTITION BY : 그룹화시킬 컬럼
	ORDER BY : 정렬순서
	WINDOWING절 : 적용시킬 데이터(행)

WINDOWING절
	ROWS BETWEEN 시작점 AND 끝점
		물리적인 행의 범위
	RANGE BETWEEN 시작점 AND 끝점
		논리적인 값의 범위

	시작점
		UNBOUNDED PRECEDING : 최초의 레코드(행, 인스턴스, 튜플)
		CURRENT ROW : 현재 레코드
		값 PRECEDING : 값만큼 이전 레코드
		값 FOLLOWING : 값만큼 이후 레코드
	끝점
		UNBOUNDED FOLLOWING : 마지막 레코드
		CURRENT ROW : 현재 레코드
		값 PRECEDING : 값만큼 이전 레코드
		값 FOLLOWING : 값만큼 이후 레코드

	WINDOWING절이 없으면 default는
	RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW

윈도우함수
	순위함수 : 레코드의 순위를 계산하는 함수
		RANK()
		DENSE_RANK()
		ROW_NUMBER()
		ORDER BY를 반드시 써야한다
	집계함수 
		SUM()
		AVG()
		MAX()
		MIN()
		COUNT()
		STDDEV()
	순서함수
		FIRST_VALUE() : 파티션 별 첫 번째 값
		LAST_VALUE() : 파티션 별 마지막 값
		LAG() : 파티션 별 이전 행의 값
		LEAD() : 파티션 별 다음 행의 값
	비율함수
		RATIO_TO_REPORT()
			파티션 내 SUM에 대한 백분율
		PERCENT_RANK()
			(순위 - 1) / (전체 갯수 - 1)
			파티션 내 순서별 백분율, 0부터 시작
		CUME_DIST()
			파티션 내 순서별 백문율, 0보다 큰 값부터 시작
		NTILE()
			균등하게 N등분
----------------------------------------------------------------------
관게형 테이터베이스
	여러개의 테이블이 서로 관계를 맺고있다
	관계를 맺고 있는 테이블 간에는 같은 값을 공유하는 컬럼이 존재한다
	
	A테이블 
		A테이블 속에 있는 a라는 컬럼을 B테이블에 제공하고 있다
	B테이블
		B테이블에 있는 b라는 컬럼은 A테이블로부터 받은 a컬럼이다
		b라는 컬럼은 a라는 컬럼으로부터 받은 외래키(foreign key)

조인 join
	여러개의 테이블을 연결하여 조회하는 기법

동등조인(equi join, 내부조인 inner join)
	양쪽 테이블에서 조건이 일치하는 행만 가져오는 조인

ORACLE 문법
	SELECT 컬럼명, 컬럼명, ...
	FROM 테이블명, 테이블명
	WHERE 조인조건;

표준조인방법
	SELECT 컬럼명, 컬럼명, ...
	FROM 테이블명
	INNER JOIN 테이블명 ON 조인조건;

	




























