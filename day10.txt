외래키 관점에서
	사원명 컬럼은 상사 컬럼에 제공되고 있으니 부모
	상사 컬럼은 사원명 컬럼으로부터 제공받고 있으니 자식

계층형쿼리
	SELECT 컬럼명
	FROM 테이블명
	START WITH 조건				-- 누구부터?
	CONNECT BY [nocycle] 연결조건	-- 어느 쪽으로?
	[ORDER SIBLINGS BY 컬럼명];		-- 자식이 여러 명이라면 먼저 찾아갈 순서

계층형 질의를 편하게 사용하기 위해 제공하는 함수
	SYS_CONNECT_BY_PATH(컬럼명, 분리기호)
		현재까지 지나온 데이터의 경로를 표시
	CONNECT_BY_ROOT(컬럼명)
		데이터 전개를 시작한 루트 데이터 

가상컬럼
	LEVEL
		해당 데이터의 레벨
	CONNECT_BY_ISLEAF
		리프노드(자식이 없다)라면 1, 아니면 0이 들어있는 가상 컬럼
	CONNECT_BY_ISCYCLE
		사이클이 발생했다면 1, 아니면 0이 들어있는 가상 컬럼
-----------------------------------------------------------------------------
절차형SQL
	프로그래밍 언어처럼 if문, 반복문 등을 사용할 수 있게 하는 명령어
	
	DECLARE
		선언부, 사용하는 변수에 대해 정의, 데이터타입 선언
	BEGIN
	END
		실행부, 구현하고자 하는 로직을 정의
	[EXCEPTION]
		예외처리부, 오류가 발생했을 때 처리할 방법을 정의
		생략 가능

프로시져(PROCEDURE; 리턴이 없는 함수)
	필요한 로직을 미리 정의하는 것
	사용 결과가 값이 아니다

프로시져 생성
	CREATE PROCEDURE 프로시져명(변수 IN 타입, 변수 IN 타입, ...)
	IS 
		내부에서 사용할 변수
	BEGIN
		문장;
		문장;
		문장;
		...
	END;

프로시져 사용
	BEGIN 
		프로시져명(값, 값, ...)
	END;

함수(FUNCTION; 리턴이 있는 함수)
	필요한 로직을 미리 정의하는 것
	사용 결과가 값이다

	CREATE FUNCTION 함수명(변수 IN 타입, 변수 IN 타입, ...)
	IS 
		내부에서 사용할 변수;
	BEGIN
		실행시킬 문장;
		문장;
		...;
	RETURN 함수 사용 결과로 되돌려줄 값;
	END;