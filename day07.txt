DML
	SELECT	: 검색
	INSERT	: 추가
	UPDATE	: 수정
	DELETE	: 삭제

INSERT INTO 테이블 (컬럼, 컬럼, ...)
VALUES (값, 값, ...);

	컬럼을 명시적으로 기술하면, 컬럼 순서를 지킬 필요가 없으며, 
	생략된 컬럼의 값으로는 기본값이 들어간다 
	(기본값이 없으면 NULL값이 삽입)

INSERT INTO 테이블명
VALUES (값, 값, 값, 값, ...);

	컬럼명을 생략하면 값의 갯수는 컬럼의 갯수와 동일해야한다
	컬럼에 순서대로 값이 삽입된다	

제약조건
	PRIMARY KEY(기본키) -- 테이블마다 무조건 있음
		중복된 값X, NULL 값X
	FOREIGN KEY(외래키) -- 테이블마다 있을수도 없을수도 있음
		자식테이블에는 부모테이블에 존재하는 값만 넣을 수 있다
		부모테이블에만 존재하고, 자식테이블에는 존재하지 않는 값만 삭제가 가능하다
	NOT NULL
		NULL을 넣을 수 없다
	UNIQUE
		중복을 허용하지 않는다
	CHECK (NOT NULL 제약조건 포함)
		데이터의 범위
	데이터 타입
		컬럼에 저장될 데이터의 타입

UPDATE
	데이터 수정(갱신)

	UPDATE 테이블명
	SET 컬럼 = 값, 컬럼 = 값, ...
	WHERE 조건;

DELETE -- 행 전체 삭제
	DELETE [FROM] 테이블명
	WHERE 조건;
--------------------------------------------------------------------------------
TCL(Transaction Control Language)
	트랜잭션을 제어하는 명령어

Transaction
	업무를 처리하기 위한 데이터베이스의 논리적인 작업 단위

COMMIT
	하나의 트랜젝션을 정상적으로 완료하고, 그 결과를 데이터베이스에 반영하라
	데이터베이스에 영구적으로 반영 (물론 취소할 수 있는 방법은 있지만 주의)
ROLLBACK
	문제(문법, 논리)가 발생한 트랜잭션을 취소하기 위한 명령어
SAVEPOINT
	하나의 트랜잭션을 작게 분할하여 저장하는 명령어
	SAVEPOINT 세이브포인트이름;
	ROLLBACK TO 세이브포인트이름;	

TRANSACTION 실행 방식
	[AUTO COMMIT]
		기본모드, DML을 수행 할때마다 DBMS가 알아서 트랜잭션을 컨트롤 하는 방식
	[MANUAL COMMIT]
	암시적 트랜잭션
		트랜잭션의 시작은 DBMS가 처리하고
		트랜잭션의 끝은 사용자가 명시적으로 처리하는 방법
	명시적 트랜잭션
		사용자가 트랜잭션의 시작과 끝을 지정하는 방식
		BEGIN TRANSACTION (BEGIN TRAN)으로 시작하고
		COMMIT/ROLLBACK [TRANSACTION]으로 끝

DML 사용 후 COMMIT 혹은 ROLLBACK은 필수이다
따라서 조건이나 서브쿼리의 결과를 예상할 수 없다면
커밋하기 이전에 조회를 하여 내가 원하는 데이터가 삽입, 수정, 삭제 되었는지 확인하고,
COMMIT 혹은 ROLLBACK 하는 것이 바람직하다

트랜잭션의 특성 (ACID)
	Atomicity 원자성
		더 이상 분해가 불가능한 업무의 최소 단위
		All or Nothing
	Consistency 일관성
		트랜잭션이 실행되기 전과 후의 데이터베이스 내용에 모순이 있으면 안된다
	Isolation 격리성
		실행중인 트랜잭션 중간 결과에 다른 트랜잭션 접근 불가
		(ex) 수강신청, 티켓팅 (한 사람이 업데이트 중이면 다른 사람은 불가)
	Durability 영속성
		성공적으로 트랜잭션이 수행되면 그 내용은 영구적으로 데이터베이스에 저장된다









